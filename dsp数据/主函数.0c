//record.c record/play input using external memory
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

#include "dsk6416_aic23.h"        //codec support
Uint32 fs=DSK6416_AIC23_FREQ_24KHZ;    //set sampling rate
#define DSK6416_AIC23_INPUT_MIC 0x0015
#define DSK6416_AIC23_INPUT_LINE 0x0011
Uint16 inputsource=DSK6416_AIC23_INPUT_MIC; // select input
#define N 300000                    //large buffer size 10 secs¡ê?
#define NN 8000

long i;
long count;
static short buffer[N];
static short bufman[N];
static short bufhigh[N];
static short buflow[N];

static float buffer2[N];
static float buffer3[N];
#pragma DATA_SECTION(buffer,".EXT_RAM") //buffer ->external memory
#pragma DATA_SECTION(buflow,".EXT_RAM11")
#pragma DATA_SECTION(bufhigh,".EXT_RAM9")
#pragma DATA_SECTION(bufman,".EXT_RAM10")
#pragma DATA_SECTION(buffer2,".EXT_RAM13")
#pragma DATA_SECTION(buffer3,".EXT_RAM14")




void main()
{
  Uint32 fs=DSK6416_AIC23_FREQ_24KHZ;
  short recording = 0;
  short playing = 0;
  memset(buffer,  0, N*sizeof(short));
  memset(buflow, 0, N*sizeof(short));
  memset(bufhigh, 0, N*sizeof(short));
  memset(buffer2, 0, N*sizeof(float));
  memset(buffer3, 0, N*sizeof(float));

  DSK6416_DIP_init();
  DSK6416_LED_init();
  comm_poll();                      //init DSK, codec, McBSP
  while(1)                            //infinite loop
  {
    if(DSK6416_DIP_get(3) == 0)       //if SW#3 is pressed
    {
      i=0;
      recording = 1;
      while (recording == 1)
      {
        DSK6416_LED_on(3);              //turn on LED#3
        buffer[i++] = input_left_sample();    //input data
        if (i>N||DSK6416_DIP_get(3) == 1)
        {
            count=i;
            recording = 0;
            DSK6416_LED_off(3);
            
        for(i=0;i<count;i++)
        {
           buffer2[i]=buffer[i]/32768.0;
        }
        for(i=0;i<NN;)
        { 
              smbPitchShift(0.5, 8192, 2048, 32, 8000.0, &buffer2[i],&buffer3[i]);
              i+=8192;
        }
        // calculate low of voice
        for(i=0;i<count;i++)
        {
            buflow[i]=(short)(32768*buffer3[i]);
        }   

        for(i=0;i<NN;)
        { 
              smbPitchShift(1.5, 8192, 2048, 32, 8000.0, &buffer2[i],&buffer3[i]);
              i+=8192;
        }
        
        //calculate high of voice
        for(i=0;i<count;i++)
        {
            bufhigh[i]=(short)(32768*buffer3[i]);
        }

        // end of pitch shift
         DSK6416_LED_on(2);
            
        }             //LED#3 off when buffer full
      
      } // while (recording == 1)
    } //if 

     
    
    if(DSK6416_DIP_get(0)==0) //if SW#0 pressed
    { 
    long j=0; 
      playing = 1;
      //DSK6416_LED_off(0);
      while (playing == 1)
      {
        DSK6416_LED_on(0);              //turn on LED#
        output_left_sample(buffer[j++]);    //input data
        if (j>N||DSK6416_DIP_get(0) == 1)
          {
            playing = 0;
            DSK6416_LED_off(0);
          }             //LED#3 off when buffer full
      } // while (playing == 1)
    } 

 
     if(DSK6416_DIP_get(1)==0) //if SW#0 pressed
    { 
      Uint32 fs=DSK6416_AIC23_FREQ_32KHZ; 
    long j=0; 
      playing = 1;
      //DSK6416_LED_off(1);
      while (playing == 1)
      {
        DSK6416_LED_on(1);              //turn on LED#
        output_left_sample(buffer[j++]);    //input data
        if (j>N||DSK6416_DIP_get(0) == 1)
          {
            playing = 0;
            DSK6416_LED_off(1);
          }             //LED#3 off when buffer full
      } // while (playing == 1)
    }

     if(DSK6416_DIP_get(0)==0) //if SW#0 pressed
    { 
      Uint32 fs=DSK6416_AIC23_FREQ_16KHZ; 
    long j=0; 
      playing = 1;
     // DSK6416_LED_off(0);
      while (playing == 1)
      {
        DSK6416_LED_on(0);              //turn on LED#
        output_left_sample(buffer[j++]);    //input data
        if (j>N||DSK6416_DIP_get(0) == 1)
          {
            playing = 0;
            DSK6416_LED_off(0);
          }             //LED#3 off when buffer full
      } // while (playing == 1)
    } 

     if(DSK6416_DIP_get(2)==0) //if SW#0 pressed
    { 
      Uint32 fs=DSK6416_AIC23_FREQ_16KHZ; 
    long j=0; 
      playing = 1;
      //DSK6416_LED_off(2);
      while (playing == 1)
      {
        DSK6416_LED_on(2);              //turn on LED#
        output_left_sample(buffer[j++]);    //input data
        if (j>N||DSK6416_DIP_get(0) == 1)
          {
            playing = 0;
            DSK6416_LED_off(2);
          }             //LED#3 off when buffer full
      } // while (playing == 1)
    }   
  }
}





